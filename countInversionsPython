def merge(arr, temp, left, mid, right):
    inv_count = 0
    
    i = left # i is the index for left subarray
    j = mid # j is the index for right subarray
    k = left # k is the index for resultant merged subarray
    while ((i <= mid - 1) and (j <= right)):
        if(arr[i] <= arr[j]):
            temp[k] = arr[i]
            i += 1
            k += 1
        else:
            temp[k] = arr[j]
            j += 1
            k += 1
            
            # this is tricky -- see above explaination/diagram for merge()
            inv_count = inv_count + (mid - i)
    
    while(i <= mid - 1):
        temp[k] = arr[i]
        k += 1
        i += 1
    
    while(j <= right):
        temp[k] = arr[j]
        j += 1
        k += 1     
    
    for i in range(left, right + 1):
        arr[i] = temp[i]
    
    return inv_count
    
def _mergesort(arr, temp, left, right):
    inv_count = 0
    if(right > left):
        mid = (right + left) // 2
        inv_count += _mergesort(arr, temp, left, mid)
        inv_count += _mergesort(arr, temp, mid+1, right)
        
        inv_count += merge(arr, temp, left, mid + 1, right)
    return inv_count
    

arr = [5,3,2,1,4]
n = 5
temp = [0] * n
ans = _mergesort(arr, temp, 0, n-1)
print("Number of inversions are", ans)

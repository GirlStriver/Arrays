"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        iter = head
        front = head

        # First round: make copy of each node,
        # and link them together side-by-side in a single list.
        while (iter != None):
            front = iter.next

            copy = Node(iter.val)
            iter.next = copy
            copy.next = front
            iter = front

        # Second round: assign random pointers for the copy nodes.
        iter = head
        while (iter != None):
            if (iter.random != None):
                iter.next.random = iter.random.next

            iter = iter.next.next

        # Third round: restore the original list, and extract the copy list.
        iter = head
        pseudoHead = Node(0)
        copy = pseudoHead

        while (iter != None):
            front = iter.next.next

            # extract the copy
            copy.next = iter.next
            copy = copy.next

            # restore the original list
            iter.next = front

            iter = front

        return pseudoHead.next
        

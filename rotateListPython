# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if (head == None or head.next == None or k == 0):
            return head
        
        # compute the length
        cur = head
        len = 1
        while (cur.next != None):
            len+=1
            cur = cur.next

        # go till that node
        cur.next = head
        k = k % len
        k = len - k
        while (k > 0):
            cur = cur.next
            k -= 1
        
        # make the node head and break connection 
        head = cur.next
        cur.next = None
        
        
        return head
